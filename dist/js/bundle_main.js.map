{"version":3,"names":[],"mappings":"","sources":["bundle_main.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n\n},{}],2:[function(require,module,exports){\nconst ImageInfo = require('./images');\nconst idb = require('idb');\n/**\r\n * Common database helper functions.\r\n */\nclass DBHelper {\n\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\n  static get DATABASE_URL() {\n    const port = '1337'; // Change this to your server port\n    return `http://localhost:${port}/restaurants`;\n  }\n\n  static initIndexedDB() {\n    this.dbPromise = idb.open('restaurant-db', 1, function (upgradeDb) {\n      switch (upgradeDb.oldVersion) {\n        case 0:\n        case 1:\n          const restaurantStore = upgradeDb.createObjectStore('restaurants', {\n            keyPath: 'id'\n          });\n          restaurantStore.createIndex('photographs', 'photograph');\n      }\n    });\n  }\n\n  /**\r\n   * Fetch all restaurants.\r\n   */\n  static fetchRestaurants(callback) {\n    var self = this;\n\n    DBHelper.fetchRestaurantsFromStorage().then(restaurants => {\n      callback(null, restaurants);\n    });\n\n    let xhr = new XMLHttpRequest();\n    xhr.open('GET', DBHelper.DATABASE_URL);\n    xhr.onload = () => {\n      if (xhr.status === 200) {\n        // Got a success response from server!\n        const restaurants = JSON.parse(xhr.responseText);\n        const imageData = ImageInfo.ImageInfoData;\n        restaurants.map(function (restaurant) {\n          if (restaurant.photograph) {\n            restaurant.alt = imageData[restaurant.photograph].alt;\n            restaurant.caption = imageData[restaurant.photograph].caption;\n          }\n          self.dbPromise.then(function (db) {\n            var tx = db.transaction('restaurants', 'readwrite');\n            var restaurantStore = tx.objectStore('restaurants');\n            return restaurantStore.put(restaurant);\n          });\n          return restaurant;\n        });\n        callback(null, restaurants);\n      } else {\n        // Oops!. Got an error from server.\n        this.dbPromise.then(() => {\n          return DBHelper.fetchRestaurantsFromStorage();\n        }).then(function (restaurants) {\n          callback(null, restaurants);\n        }).catch(function () {\n          const error = `Request failed.`;\n          callback(error, null);\n        });\n      }\n    };\n    xhr.send();\n    xhr.onerror = function () {\n      DBHelper.fetchRestaurantsFromStorage().then(restaurants => {\n        callback(null, restaurants);\n      });\n    };\n  }\n\n  /**\r\n   * Fetch restaurants from indecedDB\r\n   */\n  static fetchRestaurantsFromStorage() {\n    return this.dbPromise.then(function (db) {\n      var tx = db.transaction('restaurants');\n      var restaurantsStore = tx.objectStore('restaurants');\n      return restaurantsStore.getAll();\n    });\n  }\n\n  /**\r\n   * Fetch restaurant by Id from indecedDB\r\n   */\n  static fetchRestaurantFromStorage(id) {\n    return this.dbPromise.then(function (db) {\n      var tx = db.transaction('restaurants');\n      var restaurantsStore = tx.objectStore('restaurants');\n      return restaurantsStore.get(parseInt(id));\n    });\n  }\n\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\n  static fetchRestaurantById(id, callback) {\n    var self = this;\n\n    let xhr = new XMLHttpRequest();\n    xhr.open('GET', DBHelper.DATABASE_URL + '/' + id);\n    xhr.onload = () => {\n      if (xhr.status === 200) {\n        // Got a success response from server!\n        const restaurant = JSON.parse(xhr.responseText);\n        if (restaurant.photograph) {\n          const imageData = ImageInfo.ImageInfoData;\n          restaurant.alt = imageData[restaurant.photograph].alt;\n          restaurant.caption = imageData[restaurant.photograph].caption;\n        }\n        self.dbPromise.then(function (db) {\n          var tx = db.transaction('restaurants', 'readwrite');\n          var restaurantStore = tx.objectStore('restaurants');\n          return restaurantStore.put(restaurant);\n        });\n        callback(null, restaurant);\n      } else {\n        // Oops!. Got an error from server.\n        this.dbPromise.then(() => {\n          return DBHelper.fetchRestaurantFromStorage(id);\n        }).then(function (restaurant) {\n          callback(null, restaurant);\n        }).catch(function () {\n          const error = `Request failed.`;\n          callback(error, null);\n        });\n      }\n    };\n    xhr.onerror = function () {\n      DBHelper.fetchRestaurantFromStorage(id).then(function (restaurant) {\n        callback(null, restaurant);\n      });\n    };\n    xhr.send();\n  }\n\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants;\n        if (cuisine != 'all') {\n          // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') {\n          // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\r\n   * Restaurant page URL.\r\n   */\n  static urlForRestaurant(restaurant) {\n    return `./restaurant.html?id=${restaurant.id}`;\n  }\n\n  /**\r\n   * Restaurant image URLs JSON.\r\n   */\n  static imageUrlForRestaurant(restaurant) {\n    const representationsURLs = DBHelper.imageRepresentationsPaths(restaurant.photograph);\n    return representationsURLs;\n  }\n\n  /**\r\n   * Paths for various image representations\r\n   */\n  static imageRepresentationsPaths(filename) {\n    const [folderName, suffix] = ['./img/', 'jpg']; //,'webp'];\n    const large_1x = folderName.concat(filename, '-512_1x', '.', suffix);\n    const large_2x = folderName.concat(filename, '-512_2x', '.', suffix);\n    const small_1x = folderName.concat(filename, '-380_1x', '.', suffix);\n    const small_2x = folderName.concat(filename, '-380_2x', '.', suffix);\n\n    return {\n      large_1x: large_1x,\n      large_2x: large_2x,\n      small_1x: small_1x,\n      small_2x: small_2x\n    };\n  }\n\n  /**\r\n   * Map marker for a restaurant.\r\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP\n    });\n    return marker;\n  }\n\n}\nmodule.exports = DBHelper;\n\n},{\"./images\":3,\"idb\":1}],3:[function(require,module,exports){\n/**\n * Common image info class\n */\nclass ImageInfo {\n\n  static get ImageInfoData() {\n\n    return {\n      1: {\n        \"id\": 1,\n        \"photograph\": \"1\",\n        \"alt\": \"the main restaurant area\",\n        \"caption\": \"Large space with nice decoration\"\n      },\n      2: {\n        \"id\": 2,\n        \"photograph\": \"2\",\n        \"alt\": \"pizza on a plate\",\n        \"caption\": \"Tasty pizzas made every day\"\n      },\n      3: {\n        \"id\": 3,\n        \"photograph\": \"3\",\n        \"alt\": \"the main restaurant area empty\",\n        \"caption\": \"Modern design to enjoy your meals\"\n      },\n      4: {\n        \"id\": 4,\n        \"photograph\": \"4\",\n        \"alt\": \"the entrance of the shop\",\n        \"caption\": \"The corner shop, easy to spot\"\n      },\n      5: {\n        \"id\": 5,\n        \"photograph\": \"5\",\n        \"alt\": \"inside the shop, customers and staff\",\n        \"caption\": \"Meet our friendly staff\"\n      },\n      6: {\n        \"id\": 6,\n        \"photograph\": \"6\",\n        \"alt\": \"the area inside with some people queueing and other eating\",\n        \"caption\": \"Large space for big groups\"\n      },\n      7: {\n        \"id\": 7,\n        \"photograph\": \"7\",\n        \"alt\": \"black and white, the display of the shop with 2 people passing by\",\n        \"caption\": \"Our classic shop, still keeping our values\"\n      },\n      8: {\n        \"id\": 8,\n        \"photograph\": \"8\",\n        \"alt\": \"outdoor display of the corner shop, big label reads 'the Dutch'\",\n        \"caption\": \"Easy to find our beautiful building\"\n      },\n      9: {\n        \"id\": 9,\n        \"photograph\": \"9\",\n        \"caption\": \"Enjoying our home made meals\",\n        \"alt\": \"black and white, people eating in the restaurant\"\n      },\n      10: {\n        \"id\": 10,\n        \"photograph\": \"10\",\n        \"alt\": \"the area inside the shop, the furniture and bar, without people\",\n        \"caption\": \"Modern space, ready to serve your appetite\"\n      }\n    };\n  }\n}\n\nmodule.exports = ImageInfo;\n\n},{}],4:[function(require,module,exports){\nvar _this = this;\n\nconst DBHelper = require('./dbhelper');\n\nlet restaurants, neighborhoods, cuisines;\nvar map;\nthis.markers = [];\n\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\ndocument.addEventListener('DOMContentLoaded', event => {\n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\r\n * Service Worker (self init)\r\n */\n(setupServiceWorker = () => {\n  return new Promise((resolve, reject) => {\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', function () {\n        navigator.serviceWorker.register('/sw.js').then(function (registration) {\n          // Registration was successful\n          // console.log('ServiceWorker registration successful with scope: ', registration.scope);\n          resolve();\n        }, function (err) {\n          // registration failed :(\n          // console.log('ServiceWorker registration failed: ', err);\n          reject(err);\n        });\n      });\n    }\n  });\n})();\n/**\r\n * Initialise indexedDB\r\n */\nDBHelper.initIndexedDB();\n\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\nfetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) {\n      //  Got an error\n      console.error(error);\n    } else {\n      _this.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\r\n * Set neighborhoods HTML.\r\n */\nfillNeighborhoodsHTML = (neighborhoods = _this.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\nfetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      _this.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\r\n * Set cuisines HTML.\r\n */\nfillCuisinesHTML = (cuisines = _this.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\r\n * Initialize Google map, called from HTML.\r\n */\nwindow.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  _this.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  updateRestaurants();\n};\n\n/**\r\n * Update page and map for current restaurants.\r\n */\nupdateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  });\n};\n\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\nresetRestaurants = restaurants => {\n  // Remove all restaurants\n  _this.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  _this.markers.forEach(m => m.setMap(null));\n  _this.markers = [];\n  _this.restaurants = restaurants;\n};\n\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\nfillRestaurantsHTML = (restaurants = _this.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n};\n\n/**\r\n * Create restaurant HTML.\r\n */\ncreateRestaurantHTML = restaurant => {\n  const li = document.createElement('li');\n\n  if (restaurant.photograph) {\n    const imageRepresentations = DBHelper.imageUrlForRestaurant(restaurant);\n    const picture = document.createElement('picture');\n    picture.className = 'restaurant-img';\n    picture.setAttribute('aria-labelledby', \"fig_\" + restaurant.id);\n    picture.setAttribute('role', 'img');\n\n    const sourceSmall = document.createElement('source');\n    sourceSmall.setAttribute('media', '(max-width:700px)');\n    sourceSmall.setAttribute('srcset', imageRepresentations.small_1x.concat(' 1x,').concat(imageRepresentations.small_2x).concat(' 2x'));\n    picture.append(sourceSmall);\n\n    const sourceLarge = document.createElement('source');\n    sourceLarge.setAttribute('media', '(min-width:701px)');\n    sourceLarge.setAttribute('srcset', imageRepresentations.large_1x.concat(' 1x,').concat(imageRepresentations.large_2x).concat(' 2x'));\n    picture.append(sourceLarge);\n\n    const image = document.createElement('img');\n    image.src = imageRepresentations.small_2x;\n    image.setAttribute('alt', 'restaurant '.concat(restaurant.name, ', ', restaurant.alt));\n    image.className = 'restaurant-img';\n    picture.append(image);\n\n    const figcaption = document.createElement('figcaption');\n    figcaption.setAttribute('id', \"fig_\" + restaurant.id);\n    figcaption.innerHTML = restaurant.caption;\n    picture.append(figcaption);\n\n    li.append(picture);\n  }\n\n  const name = document.createElement('h1');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.setAttribute('role', 'button');\n  more.setAttribute('aria-label', 'View more about ' + restaurant.name);\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  li.append(more);\n\n  return li;\n};\n\n/**\r\n * Add markers for current restaurants to the map.\r\n */\naddMarkersToMap = (restaurants = _this.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, _this.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url;\n    });\n    _this.markers.push(marker);\n  });\n};\n\n},{\"./dbhelper\":2}]},{},[4]);\n"],"file":"bundle_main.js"}